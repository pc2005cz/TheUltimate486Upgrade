From 8485c7422866c7db313d7a73308e306218cd0c92 Mon Sep 17 00:00:00 2001
From: Petr Cvek <petrcvekcz@gmail.com>
Date: Thu, 19 Sep 2024 05:05:55 +0200
Subject: [PATCH 17/26] Add W83787IF superio support

---
 src/superio/winbond/w83787if/Kconfig      |   4 +
 src/superio/winbond/w83787if/Makefile.inc |   5 +
 src/superio/winbond/w83787if/early_init.c | 149 ++++++++++++++++++++++
 src/superio/winbond/w83787if/superio.c    |  24 ++++
 src/superio/winbond/w83787if/winbond.h    |  13 ++
 5 files changed, 195 insertions(+)
 create mode 100644 src/superio/winbond/w83787if/Kconfig
 create mode 100644 src/superio/winbond/w83787if/Makefile.inc
 create mode 100644 src/superio/winbond/w83787if/early_init.c
 create mode 100644 src/superio/winbond/w83787if/superio.c
 create mode 100644 src/superio/winbond/w83787if/winbond.h

diff --git a/src/superio/winbond/w83787if/Kconfig b/src/superio/winbond/w83787if/Kconfig
new file mode 100644
index 0000000000..b5ecb60c47
--- /dev/null
+++ b/src/superio/winbond/w83787if/Kconfig
@@ -0,0 +1,4 @@
+# SPDX-License-Identifier: GPL-2.0-only
+
+config SUPERIO_WINBOND_W83787IF
+	bool
diff --git a/src/superio/winbond/w83787if/Makefile.inc b/src/superio/winbond/w83787if/Makefile.inc
new file mode 100644
index 0000000000..35e34538d6
--- /dev/null
+++ b/src/superio/winbond/w83787if/Makefile.inc
@@ -0,0 +1,5 @@
+# SPDX-License-Identifier: GPL-2.0-or-later
+
+bootblock-$(CONFIG_SUPERIO_WINBOND_W83787IF) += early_init.c
+romstage-$(CONFIG_SUPERIO_WINBOND_W83787IF) += early_init.c
+ramstage-$(CONFIG_SUPERIO_WINBOND_W83787IF) += superio.c
diff --git a/src/superio/winbond/w83787if/early_init.c b/src/superio/winbond/w83787if/early_init.c
new file mode 100644
index 0000000000..658741e15b
--- /dev/null
+++ b/src/superio/winbond/w83787if/early_init.c
@@ -0,0 +1,149 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+/*
+ * A generic romstage (pre-ram) driver for various Winbond Super I/O chips.
+ *
+ *
+ *
+ * # portyr 0x250 8 0x89
+ * # portyr 0x251 8 0x0
+ * # portyr 0x252
+ * 0xd0
+ *
+ *# portyr 0x251 8 0x1
+ * # portyr 0x252
+ * 0x2c
+ *
+ * # portyr 0x251 8 0x2
+ * # portyr 0x252
+ * 0xff
+ * # portyr 0x251 8 0x3
+ * # portyr 0x252
+ * 0x90
+ * # portyr 0x251 8 0x4
+ * # portyr 0x252
+ * 0x0
+ * # portyr 0x251 8 0x5
+ * # portyr 0x252
+ * 0x0
+ * # portyr 0x251 8 0x6
+ * # portyr 0x252
+ * 0x0
+ * # portyr 0x251 8 0x7
+ * # portyr 0x252
+ * 0x0
+ * # portyr 0x251 8 0x8
+ * # portyr 0x252
+ * 0x0
+ * # portyr 0x251 8 0x9
+ * # portyr 0x252
+ * 0x8
+ *# portyr 0x251 8 0xa
+ * # portyr 0x252
+ * 0x1f
+ * # portyr 0x251 8 0xc
+ * # portyr 0x252
+ * 0xff
+ * # portyr 0x251 8 0xd
+ * # portyr 0x252
+ * 0xff
+ * # portyr 0x251 8 0xe
+ * # portyr 0x252
+ * 0x0
+ * # portyr 0x251 8 0xf
+ * # portyr 0x252
+ * 0xff
+ *
+ * wrap around?
+ * # portyr 0x251 8 0x10
+ * # portyr 0x252
+ * 0xd0
+ * # portyr 0x251 8 0x11 ; portyr 0x252
+ * 0x2c
+ * # portyr 0x251 8 0x12 ; portyr 0x252
+ * 0xff
+ * # portyr 0x251 8 0x13 ; portyr 0x252
+ * 0x90
+ * # portyr 0x251 8 0x14 ; portyr 0x252
+ * 0x0
+ * # portyr 0x251 8 0x15 ; portyr 0x252
+ * 0x0
+ *
+ * will hang uart
+ *portyr 0x251 8 0x16 ; portyr 0x252 8 0xff
+ *
+ */
+
+#include <arch/io.h>
+#include <stdint.h>
+#include <commonlib/bsd/helpers.h>
+
+
+#include "winbond.h"
+
+#define WINBOND_ENTRY_KEY	0x89	//TODO other
+#define WINBOND_EXIT_KEY	0x00
+
+#define WINBOND_EFER	0x250	//enable port
+#define WINBOND_EFIR	0x251	//index port
+#define WINBOND_EFDR	0x252	//data port
+
+static const u8 cfg[] = {
+	0x10,
+	0x2c,
+	0xff,
+	0x70,
+	0x40,
+	0x00,
+	0x05,
+	0x00,
+	0x00,
+	0x08,
+	0x1f,
+};
+
+
+/* Read from configuration register */
+static __always_inline
+u8 read_cr(uint8_t cr)
+{
+	//older revisions ends at 0xa
+	if (cr >= 0x16)
+		return 0;
+	outb(cr, WINBOND_EFIR);
+	return inb(WINBOND_EFDR);
+}
+
+/* Write to configuration register */
+static __always_inline
+void write_cr(uint8_t val, uint8_t cr)
+{
+	if (cr >= 0x16)
+		return;
+	outb(cr, WINBOND_EFIR);
+	outb(val, WINBOND_EFDR);
+}
+
+/* Enable configuration: pass entry key '0x87' into index port dev. */
+void winbond_enter_conf_state(void)
+{
+	outb(WINBOND_ENTRY_KEY, WINBOND_EFER);
+}
+
+/* Disable configuration: pass exit key '0xAA' into index port dev. */
+void winbond_exit_conf_state(void)
+{
+	outb(WINBOND_EXIT_KEY, WINBOND_EFER);
+}
+
+/* Bring up early serial debugging output before the RAM is initialized. */
+void winbond_enable_serial(u8 which, u16 iobase)
+{
+	winbond_enter_conf_state();
+
+	for (unsigned idx=0;idx<ARRAY_SIZE(cfg);idx++) {
+		write_cr(cfg[idx], idx);
+	}
+
+	winbond_exit_conf_state();
+}
diff --git a/src/superio/winbond/w83787if/superio.c b/src/superio/winbond/w83787if/superio.c
new file mode 100644
index 0000000000..d38607af16
--- /dev/null
+++ b/src/superio/winbond/w83787if/superio.c
@@ -0,0 +1,24 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+#include <device/device.h>
+
+static struct device_operations w83787if_ops = {
+	.read_resources		= noop_read_resources,
+	.set_resources		= noop_set_resources,
+	// .acpi_name		= cs35l53_acpi_name,
+	// .acpi_fill_ssdt		= cs35l53_fill_ssdt,
+};
+
+
+static void enable_dev(struct device *dev)
+{
+	// pnp_enable_devices(dev, &ops, ARRAY_SIZE(pnp_dev_info), pnp_dev_info);
+
+	dev->ops = &w83787if_ops;
+}
+
+
+struct chip_operations superio_winbond_w83787if_ops = {
+	CHIP_NAME("WINBOND W83787IF Super I/O")
+	.enable_dev = enable_dev,
+};
diff --git a/src/superio/winbond/w83787if/winbond.h b/src/superio/winbond/w83787if/winbond.h
new file mode 100644
index 0000000000..d46628b7c6
--- /dev/null
+++ b/src/superio/winbond/w83787if/winbond.h
@@ -0,0 +1,13 @@
+/* SPDX-License-Identifier: GPL-2.0-or-later */
+
+#ifndef SUPERIO_WINBOND_W83787IF_WINBOND_H
+#define SUPERIO_WINBOND_W83787IF_WINBOND_H
+
+// #include <device/pnp_type.h>
+#include <stdint.h>
+
+void winbond_enable_serial(u8 which, u16 iobase);
+void winbond_enter_conf_state(void);
+void winbond_exit_conf_state(void);
+
+#endif /* SUPERIO_WINBOND_W83787IF_WINBOND_H */
-- 
2.46.1

