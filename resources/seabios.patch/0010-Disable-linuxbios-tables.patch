From 601f53c1a9cd000f0f5df1c93c99b4c301dc8532 Mon Sep 17 00:00:00 2001
From: Petr Cvek <petrcvekcz@gmail.com>
Date: Thu, 19 Sep 2024 01:26:21 +0200
Subject: [PATCH 10/27] Disable "linuxbios" tables

memtest will crash if accessible after boot
---
 src/fw/coreboot.c | 69 ++++++++++++++++++++++++++++++++++++++++++-----
 src/post.c        |  2 ++
 src/util.h        |  2 ++
 3 files changed, 66 insertions(+), 7 deletions(-)

diff --git a/src/fw/coreboot.c b/src/fw/coreboot.c
index 7c0954b5..172b5654 100644
--- a/src/fw/coreboot.c
+++ b/src/fw/coreboot.c
@@ -109,19 +109,45 @@ ipchksum(char *buf, int count)
 static struct cb_header *
 find_cb_header(u32 addr, int len)
 {
+   dprintf(1, "find_cb_header\n");
+
     u32 end = addr + len;
     for (; addr < end; addr += 16) {
+
+#if 0
+        u8 * dptr = (u8*)addr;
+#endif
+
+#if 0
+        dprintf(1, "%3x: ", addr);
+        for (unsigned idx=0;idx<16;idx++) {
+                dprintf(1, "%02x ",dptr[idx]);
+        }
+        dprintf(1, "\n");
+#endif
         struct cb_header *cbh = (void*)addr;
         if (GET_FARVAR(0, cbh->signature) != CB_SIGNATURE)
             continue;
+
+#if 0
+        dprintf(1, "signature OK, dump: ");
+        for (unsigned idx=0;idx<24;idx++) {
+                dprintf(1, "%02x ",dptr[idx]);
+        }
+        dprintf(1, "\n");
+#endif
+
         u32 tsize = GET_FARVAR(0, cbh->table_bytes);
+        dprintf(1, "size %x\n", tsize);
         if (! tsize)
             continue;
         if (ipchksum((void*)addr, sizeof(*cbh)) != 0)
             continue;
+        dprintf(1, "checksum %u %x %x\n", sizeof(*cbh), ipchksum((void*)addr + sizeof(*cbh), tsize), GET_FARVAR(0, cbh->table_checksum));
         if (ipchksum((void*)addr + sizeof(*cbh), tsize)
             != GET_FARVAR(0, cbh->table_checksum))
             continue;
+        dprintf(1, "checksum2\n");
         return cbh;
     }
     return NULL;
@@ -135,6 +161,8 @@ find_cb_subtable(struct cb_header *cbh, u32 tag)
     u32 count = GET_FARVAR(0, cbh->table_entries);
     int i;
     for (i=0; i<count; i++) {
+//    dprintf(1, " find cb table %p\n", tbl);
+
         struct cb_memory *cbm = (void*)tbl;
         tbl += GET_FARVAR(0, cbm->size);
         if (GET_FARVAR(0, cbm->tag) == tag)
@@ -146,15 +174,24 @@ find_cb_subtable(struct cb_header *cbh, u32 tag)
 struct cb_header *
 find_cb_table(void)
 {
+dprintf(1, "find cb table\n");
+
     struct cb_header *cbh = find_cb_header(0, 0x1000);
-    if (!cbh)
+    if (!cbh) {
+        dprintf(1, "!!!!! cb header not found\n");
         return NULL;
+        }
+
+dprintf(1, "cb header found, find subtable\n");
+
     struct cb_forward *cbf = find_cb_subtable(cbh, CB_TAG_FORWARD);
     if (cbf) {
-        dprintf(3, "Found coreboot table forwarder.\n");
+        dprintf(1, "!!!!! Found coreboot table forwarder.\n");
         cbh = find_cb_header(GET_FARVAR(0, cbf->forward), 0x100);
-        if (!cbh)
+        if (!cbh) {
+        dprintf(1, "CB forwarded table not found\n");
             return NULL;
+          }
     }
     return cbh;
 }
@@ -169,13 +206,13 @@ coreboot_preinit(void)
     if (!CONFIG_COREBOOT)
         return;
 
-    dprintf(3, "Attempting to find coreboot table\n");
+    dprintf(1, "Attempting to find coreboot table\n");
 
     // Find coreboot table.
     struct cb_header *cbh = find_cb_table();
     if (!cbh)
         goto fail;
-    dprintf(3, "Now attempting to find coreboot memory map\n");
+    dprintf(1, "Now attempting to find coreboot memory map\n");
     struct cb_memory *cbm = CBMemTable = find_cb_subtable(cbh, CB_TAG_MEMORY);
     if (!cbm)
         goto fail;
@@ -186,6 +223,8 @@ coreboot_preinit(void)
         u32 type = m->type;
         if (type == CB_MEM_TABLE)
             type = E820_RESERVED;
+
+        dprintf(1, " from CB start:%016llx size:%016llx type:%08x\n", m->start, m->size, type);
         e820_add(m->start, m->size, type);
     }
 
@@ -211,7 +250,7 @@ coreboot_preinit(void)
 
 fail:
     // No table found..  Use 16Megs as a dummy value.
-    dprintf(1, "Unable to find coreboot table!\n");
+    dprintf(1, "!!!!! Unable to find coreboot table! will default to 16 MiB 0x1000000\n");
     e820_add(0, 16*1024*1024, E820_RAM);
     return;
 }
@@ -265,9 +304,12 @@ coreboot_platform_setup(void)
     // Scan CB_MEM_TABLE areas for bios tables.
     int i, count = MEM_RANGE_COUNT(cbm);
     for (i=0; i<count; i++) {
+dprintf(1, " [%d]\n", i);
         struct cb_memory_range *m = &cbm->map[i];
-        if (m->type == CB_MEM_TABLE)
+        if (m->type == CB_MEM_TABLE) {
+dprintf(1, "  is cb mem table\n");
             scan_tables(m->start, m->size);
+          }
     }
 
     find_acpi_features();
@@ -567,3 +609,16 @@ cbfs_payload_setup(void)
         boot_add_cbfs(cfile->fhdr, desc, bootprio_find_named_rom(filename, 0));
     }
 }
+
+
+//pc2005
+void
+cb_table_disable(void)
+{
+    //pc2005 disable coreboot table
+    struct cb_header *cbh = find_cb_table();
+    if (cbh) {
+////////// DELETE pc2005 disable linux bios
+        SET_FARVAR(0, cbh->signature, 0);
+    }
+}
diff --git a/src/post.c b/src/post.c
index f93106a1..ea0dce7c 100644
--- a/src/post.c
+++ b/src/post.c
@@ -227,6 +227,8 @@ maininit(void)
     // Prepare for boot.
     prepareboot();
 
+    cb_table_disable();
+
     // Write protect bios memory.
     make_bios_readonly();
 
diff --git a/src/util.h b/src/util.h
index aff8e888..9226bd13 100644
--- a/src/util.h
+++ b/src/util.h
@@ -116,6 +116,8 @@ void coreboot_cbfs_init(void);
 struct cb_header;
 void *find_cb_subtable(struct cb_header *cbh, u32 tag);
 struct cb_header *find_cb_table(void);
+void cb_table_disable(void);	//pc2005
+
 
 // fw/csm.c
 int csm_bootprio_fdc(struct pci_device *pci, int port, int fdid);
-- 
2.46.1

